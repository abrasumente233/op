hello.c:7:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
    7 |   a();
      |   ^
*** IR Dump Before AlwaysInlinerPass on [module] ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump After AlwaysInlinerPass on [module] ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump Before CoroConditionalWrapper on [module] ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump After CoroConditionalWrapper on [module] ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump Before AnnotationRemarksPass on a ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After AnnotationRemarksPass on a ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before AnnotationRemarksPass on square ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After AnnotationRemarksPass on square ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump Before Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Lower @llvm.global_dtors via `__cxa_atexit` (lower-global-dtors) ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump After Lower @llvm.global_dtors via `__cxa_atexit` (lower-global-dtors) ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before AArch64 Globals Tagging (aarch64-globals-tagging) ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump After AArch64 Globals Tagging (aarch64-globals-tagging) ***
; ModuleID = 'hello.c'
source_filename = "hello.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx14.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+crc,+dotprod,+fp-armv8,+fp16fml,+fullfp16,+lse,+neon,+ras,+rcpc,+rdm,+sha2,+sha3,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 17.0.6"}
*** IR Dump Before AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before SME ABI Pass (aarch64-sme-abi) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After SME ABI Pass (aarch64-sme-abi) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Prepare callbr (callbrprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Prepare callbr (callbrprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define float @a() #0 {
  ret float 0.000000e+00
}
# *** IR Dump Before IRTranslator (irtranslator) ***:
# Machine code for function a: IsSSA, TracksLiveness

# End machine code for function a.

# *** IR Dump After IRTranslator (irtranslator) ***:
# Machine code for function a: IsSSA, TracksLiveness

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before AArch64O0PreLegalizerCombiner (aarch64-O0-prelegalizer-combiner) ***:
# Machine code for function a: IsSSA, TracksLiveness

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After AArch64O0PreLegalizerCombiner (aarch64-O0-prelegalizer-combiner) ***:
# Machine code for function a: IsSSA, TracksLiveness

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before Localizer (localizer) ***:
# Machine code for function a: IsSSA, TracksLiveness

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After Localizer (localizer) ***:
# Machine code for function a: IsSSA, TracksLiveness

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before Legalizer (legalizer) ***:
# Machine code for function a: IsSSA, TracksLiveness

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After Legalizer (legalizer) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before AArch64PostLegalizerLowering (aarch64-postlegalizer-lowering) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After AArch64PostLegalizerLowering (aarch64-postlegalizer-lowering) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before RegBankSelect (regbankselect) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized

bb.1 (%ir-block.0):
  %0:_(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:_(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After RegBankSelect (regbankselect) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected

bb.1 (%ir-block.0):
  %0:fpr(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:fpr(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before InstructionSelect (instruction-select) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected

bb.1 (%ir-block.0):
  %0:fpr(s32) = G_FCONSTANT float 0.000000e+00
  $s0 = COPY %0:fpr(s32)
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After InstructionSelect (instruction-select) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before AArch64 Instruction Selection (aarch64-isel) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After AArch64 Instruction Selection (aarch64-isel) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function a: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function a: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function a: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function a: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump Before Fast Register Allocator (regallocfast) ***:
# Machine code for function a: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  %0:fpr32 = FMOVS0
  $s0 = COPY %0:fpr32
  RET_ReallyLR implicit $s0

# End machine code for function a.

# *** IR Dump After Fast Register Allocator (regallocfast) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump Before AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET_ReallyLR implicit killed $s0

# End machine code for function a.

# *** IR Dump After AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Branch relaxation pass (branch-relaxation) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.1 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Branch relaxation pass (branch-relaxation) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.0 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Insert CFI remember/restore state instructions (cfi-fixup) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.0 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Insert CFI remember/restore state instructions (cfi-fixup) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.0 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.0 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.0 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.0 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function a: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten

bb.0 (%ir-block.0):
  renamable $s0 = FMOVS0
  RET undef $lr, implicit killed $s0

# End machine code for function a.

*** IR Dump Before AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before SME ABI Pass (aarch64-sme-abi) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After SME ABI Pass (aarch64-sme-abi) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Prepare callbr (callbrprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Prepare callbr (callbrprepare) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @square(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %3 = call float @a()
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %2, align 4
  %6 = mul nsw i32 %4, %5
  ret i32 %6
}
# *** IR Dump Before IRTranslator (irtranslator) ***:
# Machine code for function square: IsSSA, TracksLiveness

# End machine code for function square.

# *** IR Dump After IRTranslator (irtranslator) ***:
# Machine code for function square: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %2:_(s32) = COPY $s0
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before AArch64O0PreLegalizerCombiner (aarch64-O0-prelegalizer-combiner) ***:
# Machine code for function square: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %2:_(s32) = COPY $s0
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After AArch64O0PreLegalizerCombiner (aarch64-O0-prelegalizer-combiner) ***:
# Machine code for function square: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before Localizer (localizer) ***:
# Machine code for function square: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After Localizer (localizer) ***:
# Machine code for function square: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before Legalizer (legalizer) ***:
# Machine code for function square: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After Legalizer (legalizer) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before AArch64PostLegalizerLowering (aarch64-postlegalizer-lowering) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After AArch64PostLegalizerLowering (aarch64-postlegalizer-lowering) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before RegBankSelect (regbankselect) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:_(s32) = COPY $w0
  %1:_(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:_(s32), %1:_(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:_(s32) = G_LOAD %1:_(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:_(s32) = nsw G_MUL %3:_, %4:_
  $w0 = COPY %5:_(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After RegBankSelect (regbankselect) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr(s32) = COPY $w0
  %1:gpr(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:gpr(s32), %1:gpr(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr(s32) = G_LOAD %1:gpr(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:gpr(s32) = G_LOAD %1:gpr(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:gpr(s32) = nsw G_MUL %3:gpr, %4:gpr
  $w0 = COPY %5:gpr(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before InstructionSelect (instruction-select) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr(s32) = COPY $w0
  %1:gpr(p0) = G_FRAME_INDEX %stack.0
  G_STORE %0:gpr(s32), %1:gpr(p0) :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr(s32) = G_LOAD %1:gpr(p0) :: (dereferenceable load (s32) from %ir.2)
  %4:gpr(s32) = G_LOAD %1:gpr(p0) :: (dereferenceable load (s32) from %ir.2)
  %5:gpr(s32) = nsw G_MUL %3:gpr, %4:gpr
  $w0 = COPY %5:gpr(s32)
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After InstructionSelect (instruction-select) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before AArch64 Instruction Selection (aarch64-isel) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After AArch64 Instruction Selection (aarch64-isel) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function square: IsSSA, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function square: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function square: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function square: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump Before Fast Register Allocator (regallocfast) ***:
# Machine code for function square: NoPHIs, TracksLiveness, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def $lr, implicit $sp, implicit-def $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  %3:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %4:gpr32 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  %5:gpr32 = nsw MADDWrrr %3:gpr32, %4:gpr32, $wzr
  $w0 = COPY %5:gpr32
  RET_ReallyLR implicit $w0

# End machine code for function square.

# *** IR Dump After Fast Register Allocator (regallocfast) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  STRWui killed renamable $w0, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  STRWui killed renamable $w0, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  STRWui killed renamable $w0, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  STRWui killed renamable $w0, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  STRWui killed renamable $w0, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0
  STRWui killed renamable $w0, %stack.0, 0 :: (store (s32) into %ir.2)
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  renamable $w8 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDRWui %stack.0, 0 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump Before AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET_ReallyLR implicit killed $w0

# End machine code for function square.

# *** IR Dump After AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Branch relaxation pass (branch-relaxation) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.1 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Branch relaxation pass (branch-relaxation) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.0 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Insert CFI remember/restore state instructions (cfi-fixup) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.0 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Insert CFI remember/restore state instructions (cfi-fixup) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.0 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.0 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.0 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.0 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function square: NoPHIs, TracksLiveness, NoVRegs, Legalized, RegBankSelected, Selected, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-20]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
Function Live Ins: $w0

bb.0 (%ir-block.1):
  liveins: $w0, $lr
  $sp = frame-setup SUBXri $sp, 32, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 16, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -4 :: (store (s32) into %ir.2)
  BL @a, <regmask $fp $lr $wzr $xzr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 and 55 more...>, implicit-def dead $lr, implicit $sp, implicit-def dead $s0
  renamable $w8 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w9 = LDURWi $fp, -4 :: (dereferenceable load (s32) from %ir.2)
  renamable $w0 = nsw MADDWrrr killed renamable $w8, killed renamable $w9, $wzr
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load (s64) from %stack.2), (load (s64) from %stack.1)
  $sp = frame-destroy ADDXri $sp, 32, 0
  RET undef $lr, implicit killed $w0

# End machine code for function square.

1 warning generated.
